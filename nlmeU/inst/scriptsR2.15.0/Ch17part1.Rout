
R version 2.15.0 (2012-03-30)
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-pc-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> ###################################################
> ### code chunk: Chap17init
> ###################################################
> options(digits = 5, show.signif.stars = FALSE)
> sessionInfo()
R version 2.15.0 (2012-03-30)
Platform: x86_64-pc-mingw32/x64 (64-bit)

locale:
[1] LC_COLLATE=C                          
[2] LC_CTYPE=English_United States.1252   
[3] LC_MONETARY=English_United States.1252
[4] LC_NUMERIC=C                          
[5] LC_TIME=English_United States.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     
> library(nlme)
> library(lattice)
> 
> ###################################################
> ### code chunk: R17.1a
> ###################################################
> data(prt, package = "nlmeU")
> lme.spec.form1 <- 
+    formula(spec.fo ~ (prt.f + occ.f)^2 + sex.f + age.f + 
+              sex.f:age.f + bmi) 
> prt1 <- subset(prt, fiber.f == "Type 1", select = -fiber.f)
> fm17.1 <-                                        # M17.1 (17.1)
+    lme(lme.spec.form1,                    
+        random = ~occ.f - 1|id,                   # Random effects structure (including D)
+        data = prt1) 
> 
> 
> ###################################################
> ### code chunk: R17.1b
> ###################################################
> getGroupsFormula(fm17.1)
~id
<environment: 0x0000000004dfc7b0>
> str(grpF <- getGroups(fm17.1))
 Factor w/ 63 levels "5","10","15",..: 1 1 1 1 1 1 1 1 1 1 ...
 - attr(*, "label")= chr "id"
> nF1 <- xtabs(~grpF)       # Number of type-1 fibers per subject
> range(nF1)                # Min, max number of type-1 fibers
[1]  6 36
> nF1[which.min(nF1)]       # Subject with the minimum number of fibers
275 
  6 
> str(fm17.1$dims)          # Basic dimensions used in the fit
List of 5
 $ N    : int 1299
 $ Q    : int 1
 $ qvec : num [1:3] 2 0 0
 $ ngrps: Named int [1:3] 63 1 1
  ..- attr(*, "names")= chr [1:3] "id" "X" "y"
 $ ncol : num [1:3] 2 8 1
> 
> 
> ###################################################
> ### code chunk: R17.2
> ###################################################
> fixed1 <- summary(fm17.1)$tTable           # beta, se(beta), t-test
> nms <- rownames(fixed1)                    # beta names
> nms[7:8] <- c("fLow:fPos", "fMale:fOld")   # Selected names shortened 
> rownames(fixed1) <- nms                    # New names assigned
> printCoefmat(fixed1, digits = 3,           # See also Table 17.1 
+              has.Pvalue = TRUE, P.values = TRUE)
               Value Std.Error       DF t-value p-value
(Intercept)  127.724    15.416 1234.000    8.28   3e-16
prt.fLow       2.886     4.338   57.000    0.67   0.509
occ.fPos       4.703     2.667 1234.000    1.76   0.078
sex.fMale     -1.385     5.364   57.000   -0.26   0.797
age.fOld       8.984     5.155   57.000    1.74   0.087
bmi            0.491     0.578   57.000    0.85   0.399
fLow:fPos     -2.133     3.750 1234.000   -0.57   0.570
fMale:fOld   -12.680     7.553   57.000   -1.68   0.099
> 
> 
> ###################################################
> ### code chunk: R17.3a
> ###################################################
> getVarCov(fm17.1)             # D: (17.3)
Random effects variance covariance matrix
         occ.fPre occ.fPos
occ.fPre   238.68   166.42
occ.fPos   166.42   201.46
  Standard Deviations: 15.449 14.194 
> VarCorr(fm17.1)
id = pdLogChol(occ.f - 1) 
         Variance StdDev Corr   
occ.fPre 238.68   15.449 occ.fPr
occ.fPos 201.46   14.194 0.759  
Residual 505.59   22.485        
> 
> 
> ###################################################
> ### code chunk: R17.3b
> ###################################################
> Ri <-                         # Ri is a list containing R_i ...
+   getVarCov(fm17.1, c("5", "275"),# ... for subjects "5" and "275". 
+             type = "conditional")
> Ri$"275"                      # R_i for the subject "275" (17.2)
       1      2      3      4      5      6
1 505.59   0.00   0.00   0.00   0.00   0.00
2   0.00 505.59   0.00   0.00   0.00   0.00
3   0.00   0.00 505.59   0.00   0.00   0.00
4   0.00   0.00   0.00 505.59   0.00   0.00
5   0.00   0.00   0.00   0.00 505.59   0.00
6   0.00   0.00   0.00   0.00   0.00 505.59
> Ri.5   <- Ri$"5"              # R_i for the subject "5" ...
> dim(Ri.5)                       # ... with large dimensions ...
[1] 30 30
> (Ri.5d <- diag(Ri.5)[1:6])      # ... its first 6 diagonal elements.
     1      2      3      4      5      6 
505.59 505.59 505.59 505.59 505.59 505.59 
> sgma <- summary(fm17.1)$sigma # sigma          
> sgma^2                        # sigma^2
[1] 505.59
> 
> 
> ###################################################
> ### code chunk: R17.4a
> ###################################################
> dt5 <-                             # Data with 30 observations 
+    subset(prt1,               
+           select = c(id, occ.f),     # ... and 2 variables                    
+           id == "5")                 # ... for the subject "5".
> auxF1 <- function(elv) {
+    idx <- 1:min(length(elv), 2)    # Up to two indices per vector 
+    elv[idx]                          # ... returned.
+ }
> (i.u5 <-                           # Selected indices printed
+    unlist(
+       tapply(rownames(dt5),          # ... for the subject "5"
+              dt5$occ.f,              # ... by occ.f subgroups 
+              FUN = auxF1)))
Pre1 Pre2 Pos1 Pos2 
 "1"  "2" "20" "22" 
> dt.u5  <- dt5[i.u5, ]              # Raw data for selected indices
> (nms.u5 <-                         # Row names constructed
+    paste(i.u5, dt.u5$occ.f, sep = ".")) 
[1] "1.Pre"  "2.Pre"  "20.Pos" "22.Pos"
> 
> 
> ###################################################
> ### code chunk: R17.4b
> ###################################################
> Vi <-                                # Vi is a list containing ...  
+   getVarCov(fm17.1, "5",               # ... matrix V_i for subject "5".
+             type = "marginal")
> Vi.5 <- Vi$"5"                       # Vi.5 is a V_i matrix: (17.4)
> Vi.u5 <- Vi.5[i.u5, i.u5]            # A sub-matrix selected, ...
> rownames(Vi.u5) <- nms.u5              # ... row/column names changed,
> Vi.u5                                  # ... the sub-matrix printed.
            1      2     20     22
1.Pre  744.27 238.68 166.42 166.42
2.Pre  238.68 744.27 166.42 166.42
20.Pos 166.42 166.42 707.05 201.46
22.Pos 166.42 166.42 201.46 707.05
> cov2cor(Vi.u5)                       # Corr(V_i) 
             1       2      20      22
1.Pre  1.00000 0.32069 0.22941 0.22941
2.Pre  0.32069 1.00000 0.22941 0.22941
20.Pos 0.22941 0.22941 1.00000 0.28493
22.Pos 0.22941 0.22941 0.28493 1.00000
> 
> 
> ###################################################
> ### code chunk: R17.5
> ###################################################
> rnf <- ranef(fm17.1)         # b_i: (13.50)
> (vrnf <- var(rnf))           # var(b_i). Compare to D in R17.13a.
         occ.fPre occ.fPos
occ.fPre   184.31   141.70
occ.fPos   141.70   150.59
> plot(rnf)                    # Side-by-side plot (Fig. 17.1a)
> 
> 
> library(ellipse)
> myPanel <- function(x,y, ...){
+   panel.grid(h = -1, v = -1)
+   panel.xyplot(x, y)
+   ex1 <-                     # Ellipse based on D: (17.3)
+      ellipse(getVarCov(fm17.1)) 
+   panel.xyplot(ex1[, 1], ex1[, 2], type = "l", lty = 1) 
+   ex2 <- ellipse(vrnf)       # Ellipse based on var(b_i). 
+   panel.xyplot(ex2[ ,1], ex2[, 2], type = "l", lty = 2)
+ }
> 
> 
> xyplot(rnf[, 2] ~ rnf[, 1],  # Scatterplot b_i1 versus b_i0 (Fig. 17.1b) 
+        xlab = "Pre-intervention", 
+        ylab = "Post-intervention",
+        xlim = c(-40, 40), ylim = c(-40, 40), 
+        panel = myPanel)
> 
> 
> ###################################################
> ### code chunk: R17.6
> ###################################################
> prt1r <-                                     # Auxiliary data
+    within(prt1, 
+           {                                  # Pearson residuals                       
+             residP1 <- residuals(fm17.1, type = "p")  
+             fitted1 <- fitted(fm17.1)
+           })
> range(prt1r$residP1)                    # Info for y-axis range
[1] -2.8753  5.7108
> xyplot(residP1 ~ fitted1| occ.f,   # Resids vs fitted (Fig. 17.2a)
+        data = prt1r, ylim = c(-6, 6), 
+        type = c("p", "smooth"),
+        grid = TRUE)
> qqnorm(prt1r$residP1); qqline(prt1r$residP1) # Q-Q plot (Fig. 17.3a)
> 
> 
> 
> ###################################################
> ### code chunk: R17.7
> ###################################################
> fm17.2 <-                             #  M17.2 <- M17.1
+    update(fm17.1,
+           weights = varPower(form = ~fitted(.)),
+           data = prt1) 
> intervals(fm17.2)$varStruct           # 95% CI for delta, (17.5)
       lower  est.  upper
power 1.1859 1.566 1.9461
attr(,"label")
[1] "Variance function:"
> anova(fm17.1, fm17.2)                 # H0: delta = 0 (M17.1 nested in M17.2)
       Model df   AIC   BIC  logLik   Test L.Ratio p-value
fm17.1     1 12 11936 11998 -5956.2                       
fm17.2     2 13 11895 11962 -5934.5 1 vs 2  43.548  <.0001
> 
> 
> 
> ###################################################
> ### code chunk: R17.8a
> ###################################################
> lme.spec.form3 <- 
+    update(lme.spec.form1,                    # M17.3  <-  M17.1 
+           . ~ . + fiber.f + prt.f:fiber.f + occ.f:fiber.f)
> fm17.3 <- 
+    lme(lme.spec.form3,                       # (17.6)
+        random = ~occ.f:fiber.f - 1|id,       # D(17.7)
+        data = prt) 
> 
> 
> 
> ###################################################
> ### code chunk: R17.8b
> ###################################################
> fixed.D4 <- summary(fm17.3)$tTable         # beta, se(beta), t-test  
> rnms <- rownames(fixed.D4)                 # beta names (not shown)
> rnms[8:11] <-                              # Selected names shortened
+    c("Low:Pos", "Low:Type2", "Pos:Type2", "Male:Old") 
> rownames(fixed.D4) <- rnms                 # Short names assigned
> printCoefmat(fixed.D4, digits = 3, zap.ind = 5)  
                 Value Std.Error       DF  t-value p-value
(Intercept)    129.611    14.288 2403.000    9.071    0.00
prt.fLow         1.951     4.313   57.000    0.452    0.65
occ.fPos         4.299     2.503 2403.000    1.717    0.09
sex.fMale       -2.037     5.021   57.000   -0.406    0.69
age.fOld         8.694     4.759   57.000    1.827    0.07
bmi              0.399     0.532   57.000    0.749    0.46
fiber.fType 2   25.302     2.404 2403.000   10.524    0.00
Low:Pos         -1.134     3.408 2403.000   -0.333    0.74
Low:Type2       -6.263     6.966   57.000   -0.899    0.37
Pos:Type2       -4.078     2.913 2403.000   -1.400    0.16
Male:Old         4.094     2.372 2403.000    1.726    0.08
> 
> 
> ###################################################
> ### code chunk: R17.9a
> ###################################################
> fm17.3cov <-                                   # D: (17.7) extracted
+    getVarCov(fm17.3, type = "random.effect") 
> rownames(fm17.3cov)                            # Long names ...
[1] "occ.fPre:fiber.fType 1" "occ.fPos:fiber.fType 1" "occ.fPre:fiber.fType 2"
[4] "occ.fPos:fiber.fType 2"
> nms. <- c("T1.Pre", "T1.Pos", "T2.Pre", "T2.Pos")# ... abbreviated
> dimnames(fm17.3cov) <- list(nms., nms.)          # ... and reassigned.
> fm17.3cov                                      # D: (17.7) printed
Random effects variance covariance matrix
       T1.Pre T1.Pos T2.Pre T2.Pos
T1.Pre 248.78 175.32 212.49 155.38
T1.Pos 175.32 184.61 109.99 172.97
T2.Pre 212.49 109.99 241.63 133.74
T2.Pos 155.38 172.97 133.74 247.03
  Standard Deviations: 15.773 13.587 15.544 15.717 
> fm17.3cor <- cov2cor(fm17.3cov)                # Corr(D) ...
> print(fm17.3cor, digits = 2,                     # ...printed.
+       corr = TRUE, stdevs = FALSE)             
Random effects correlation matrix
       T1.Pre T1.Pos T2.Pre T2.Pos
T1.Pre   1.00   0.82   0.87   0.63
T1.Pos   0.82   1.00   0.52   0.81
T2.Pre   0.87   0.52   1.00   0.55
T2.Pos   0.63   0.81   0.55   1.00
> 
> 
> ###################################################
> ### code chunk: R17.9b
> ###################################################
> dim(R.5 <-                                     # Dims of R_i ...
+    getVarCov(fm17.3,                    
+              type = "conditional")[["5"]])        # ... for subject "5".
[1] 41 41
> diag(R.5)[1:6]                            # First 6 diagonal elements
     1      2      3      4      5      6 
599.13 599.13 599.13 599.13 599.13 599.13 
> (sgma <- fm17.3$sigma)                         # sigma
[1] 24.477
> print(sgma^2)                                  # sigma^2
[1] 599.13
> 
> 
> ###################################################
> ### code chunk: R17.10
> ###################################################
> CI <- intervals(fm17.3, which = "var-cov") # 95% CIs for theta_D
> interv <- CI$reStruct$id                   
> # rownames(interv)                         # Long names (not shown)
> thDnms  <- 
+    c("sd(T1Pre)", "sd(T1Pos)", "sd(T2Pre)", "sd(T2Pos)",
+      "cor(T1Pre,T1Pos)", "cor(T1Pre,T2Pre)", "cor(T1Pre,T2Pos)", 
+                          "cor(T1Pos,T2Pre)", "cor(T1Pos,T2Pos)", 
+                                              "cor(T2Pre,T2Pos)")   
> rownames(interv) <- thDnms                 # Short names assigned
> interv                                     # CIs printed
                    lower     est.    upper
sd(T1Pre)        12.29101 15.77280 20.24091
sd(T1Pos)        10.60119 13.58706 17.41391
sd(T2Pre)        12.27121 15.54447 19.69085
sd(T2Pos)        12.25335 15.71709 20.15996
cor(T1Pre,T1Pos)  0.55111  0.81810  0.93314
cor(T1Pre,T2Pre)  0.61009  0.86667  0.95874
cor(T1Pre,T2Pos)  0.34280  0.62679  0.80581
cor(T1Pos,T2Pre)  0.19870  0.52079  0.74134
cor(T1Pos,T2Pos)  0.53362  0.80998  0.93005
cor(T2Pre,T2Pos)  0.23955  0.54742  0.75526
> 
> ###################################################
> ### code chunk: R17.11
> ###################################################
> residP3 <- residuals(fm17.3, type =  "p") # Pearson residuals 
> xyplot(residP3 ~ fitted(fm17.3)|   # Scatterplots ...
+        fiber.f:occ.f,              # ...per type*occasion (Fig. 17.4)
+        data = prt,
+        type = c("p", "smooth"))
> qqnorm(residP3); qqline(residP3)   # Q-Q plot (Fig. 17.5)
> 
> 
> 
> ###################################################
> ### code chunk: R17.12a
> ###################################################
> Vx <-                                # Vx is a list ...
+    getVarCov(fm17.3, type = "marginal",                    
+              individual = "5")       # ... with one component.
> Vmtx.5 <- Vx$"5"                     # Vmtx.5 is V_i matrix (17.8)...  
> dim(Vmtx.5)                            # ... with large dimensions.
[1] 41 41
> dt5 <-                               # Data with 41 rows ...
+    subset(prt,                   
+           select = c(id, fiber.f, occ.f), # ... and 3 variables ...
+           id == "5")                   # ... for subject "5".
> 
> 
> ###################################################
> ### code chunk: R17.12b
> ###################################################
> (i.u5  <- unlist(                    # Selected indices printed.
+    tapply(rownames(dt5),             # Indices for subject "5" ...                       
+           list(dt5$fiber.f, dt5$occ.f), # ... by fiber.f and occ.f.
+           FUN = auxF1))) 
[1] "1"  "2"  "3"  "5"  "20" "22" "21" "25"
> dt.u5  <- dt5[i.u5, ]                # Raw data for selected indices
> nms.u5 <- 
+    paste(format(i.u5, 2, justify = "right"),   
+          abbreviate(dt.u5$fiber.f, 2),     # Row names abbreviated 
+          dt.u5$occ.f, sep = ".") 
> 
> 
> ###################################################
> ### code chunk: R17.12c
> ###################################################
> Vmtx.u5 <- Vmtx.5[i.u5, i.u5]      # Submatrix of V_i for subject "5"
> dimnames(Vmtx.u5) <- list(nms.u5, i.u5) # dimnames assigned
> Cmtx.u5 <- cov2cor(Vmtx.u5)        # Submatrix of Corr(V_i)
> uptri <- upper.tri(Cmtx.u5)        # Logical matrix
> Vmtx.u5[uptri] <- Cmtx.u5[uptri]      
> print(Vmtx.u5, digits = 2)         # Submatrix printed
            1      2      3      5     20     22     21     25
 1.T1.Pre 848   0.29   0.25   0.25   0.22   0.22   0.18   0.18
 2.T1.Pre 249 847.91   0.25   0.25   0.22   0.22   0.18   0.18
 3.T2.Pre 212 212.49 840.76   0.29   0.14   0.14   0.16   0.16
 5.T2.Pre 212 212.49 241.63 840.76   0.14   0.14   0.16   0.16
20.T1.Pos 175 175.32 109.99 109.99 783.74   0.24   0.21   0.21
22.T1.Pos 175 175.32 109.99 109.99 184.61 783.74   0.21   0.21
21.T2.Pos 155 155.38 133.74 133.74 172.97 172.97 846.16   0.29
25.T2.Pos 155 155.38 133.74 133.74 172.97 172.97 247.03 846.16
> 
> 
> ###################################################
> ### code chunk: R17.13a
> ###################################################
> fm17.3a <- 
+    lme(lme.spec.form3,                     # M17.3a
+        random = ~1 + fiber.f + occ.f + fiber.f:occ.f|id,
+        data = prt) 
> print(fm17.3a$sigma, digits = 4)           # sigma
[1] 24.48
> fm17.3acov <-                              # D
+    getVarCov(fm17.3a,                
+              type = "random.effect", individual = "5")
> dimnames(fm17.3acov)[[1]]                  # Row/col D names ...
[1] "(Intercept)"            "fiber.fType 2"          "occ.fPos"              
[4] "fiber.fType 2:occ.fPos"
> nms <- c("(Int)", "T2", "Pos", "T2:Pos")   # ... shortened
> dimnames(fm17.3acov) <- list(nms,nms)      # ... and assigned.
> print(fm17.3acov, digits = 4)              # D printed
Random effects variance covariance matrix
        (Int)     T2    Pos T2:Pos
(Int)  248.90 -36.34 -73.48  16.41
T2     -36.34  65.45 -29.04 -21.75
Pos    -73.48 -29.04  82.71  37.38
T2:Pos  16.41 -21.75  37.38  63.70
  Standard Deviations: 15.78 8.09 9.094 7.981 
> 
> 
> ###################################################
> ### code chunk: R17.13b
> ###################################################
> td <-                                      # T_D: (17.12) created...
+    matrix(c(1, 0, 0, 0,                   
+             1, 0, 1, 0,                     
+             1, 1, 0, 0,
+             1, 1, 1, 1), 
+           nrow = 4, ncol = 4, byrow = TRUE)
> mat.D4 <- td %*% fm17.3acov %*% t(td)          # ... and applied.
> dimnames(mat.D4) <- list(nms., nms.)       # Row/col names shortened.
> print(mat.D4, digits = 5)                  # D:(17.7); see R17.9.
       T1.Pre T1.Pos T2.Pre T2.Pos
T1.Pre 248.86 175.38 212.52 155.45
T1.Pos 175.38 184.60 110.00 173.01
T2.Pre 212.52 110.00 241.64 133.77
T2.Pos 155.45 173.01 133.77 247.08
> 
> 
> 
> ###################################################
> ### code chunk: fig 17.6 using splom() function
> ###################################################
> 
> D173 <- getVarCov(fm17.3)
> D173a <- getVarCov(fm17.3a)
> nms    <- c("T1:Pre/(Int)","T2:Pre/T2","T1:Pos/Pos","T2:Pos/T2:Pos","fitName")
> dtref1 <- within(ranef(fm17.3),  fitName <- "fm17.3")
> names(dtref1)
[1] "occ.fPre:fiber.fType 1" "occ.fPos:fiber.fType 1" "occ.fPre:fiber.fType 2"
[4] "occ.fPos:fiber.fType 2" "fitName"               
> names(dtref1) <- nms
> dtref2 <- within(ranef(fm17.3a), fitName <- "fm17.3a")
> names(dtref2)
[1] "(Intercept)"            "fiber.fType 2"          "occ.fPos"              
[4] "fiber.fType 2:occ.fPos" "fitName"               
> names(dtref2) <- nms
> dtref  <- rbind(dtref1, dtref2)
> (lims <- range(dtref[,1:4]))
[1] -29.203  31.060
> lims <- c(-40,40)  # user-defined limits for every variable
> atx <- -1
> 
> 
> myFunL <- function(corx) ltext(-15, 25, substitute(paste(rho, corx), list(corx = corx)), cex = 0.9)
> 
> myFunU <- function(corx) ltext(-15, -32, substitute(paste(rho, corx), list(corx = corx)), cex = 0.9)
> 
> my.upperPanel <-  ## pairwise.complete.obs 
+   function(x, y, subscripts, ...){
+   vr <- dtref$fitName == "fm17.3a" 
+   subs <- subscripts[vr]         
+   x1 <- x[subs]
+   y1 <- y[subs]
+   panel.grid(h = atx, v = atx, col = "grey", ...)
+   panel.xyplot(x1, y1, ...)
+   corx <- round(cor(x1, y1, use = "complete.obs"), 2)
+   abs.corx <- abs(corx)
+   corx <- paste("=", corx, sep = "")
+   myFunU(corx)
+ }
> 
> my.lowerPanel <-  ## pairwise.complete.obs 
+   function(x, y, subscripts, ...){
+   vr <- dtref$fitName == "fm17.3" 
+   subs <- subscripts[vr]         
+   x1 <- x[subs]
+   y1 <- y[subs]
+   panel.grid(h=atx,v=atx, col="grey") ##  ...lty="13",...)
+   panel.xyplot(x1, y1, ...)
+   corx <- round(cor(x1, y1, use = "complete.obs"), 2)
+   abs.corx <- abs(corx)
+   corx <- paste("=", corx, sep = "")
+   print(corx)
+   cex.value <- 2
+   rx <- expression(paste(rho,corx))
+   myFunL(corx)
+ }
> 
> mySuperPanel <- function(z, subscripts, panel.subscripts,...){
+   panel.pairs(z, subscripts = subscripts,
+               panel.subscripts = panel.subscripts,
+               as.matrix = TRUE, 
+               upper.panel = "my.upperPanel",
+               lower.panel = "my.lowerPanel",
+               ## Possible to shorten syntax. See other splom figures
+               pscales =list(
+                 "T1:Pre/(Int)"  = list(limits = lims),
+                 "T2:Pre/T2"     = list(limits = lims),
+                 "T1:Pos/Pos"    = list(limits = lims),
+                 "T2:Pos/T2:Pos" = list(limits = lims)) )
+ print(names(z))
+ }
> 
> abbrev.names <- c("vis0", "vis4", "vis12", "vis24", "vis52")
> 
> splom.form <- formula(~as.matrix(dtref[,1:4])) 
> splom(splom.form,
+   data = dtref, 
+   as.matrix = TRUE,  #### varnames = abbrev.names, 
+   xlab = "",
+   superpanel = mySuperPanel 
+ )
[1] "=0.86"
[1] "=0.92"
[1] "=0.63"
[1] "=0.72"
[1] "=0.89"
[1] "=0.61"
[1] "T1:Pre/(Int)"  "T2:Pre/T2"     "T1:Pos/Pos"    "T2:Pos/T2:Pos"
> 
> sessionInfo()
R version 2.15.0 (2012-03-30)
Platform: x86_64-pc-mingw32/x64 (64-bit)

locale:
[1] LC_COLLATE=C                          
[2] LC_CTYPE=English_United States.1252   
[3] LC_MONETARY=English_United States.1252
[4] LC_NUMERIC=C                          
[5] LC_TIME=English_United States.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] ellipse_0.3-7  lattice_0.20-6 nlme_3.1-103  

loaded via a namespace (and not attached):
[1] grid_2.15.0  tools_2.15.0
> detach(package:nlme)
> 
> 
> proc.time()
   user  system elapsed 
  38.54    0.10   38.75 
