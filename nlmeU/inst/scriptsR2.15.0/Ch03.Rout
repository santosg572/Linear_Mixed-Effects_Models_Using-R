
R version 2.15.0 (2012-03-30)
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-pc-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> ###################################################
> ###
> ### code chunk: Ch03Init
> ###
> ### ARMD Trial: Visual acuity (Section 3.2)
> ### 
> ###################################################
> options(width = 65, digits = 5, show.signif.stars = FALSE)
> date()
[1] "Wed Mar 06 17:39:37 2013"
> packageVersion("nlmeU")
[1] '0.30.7'
> packageVersion("nlme")
[1] '3.1.103'
> packageVersion("reshape")
[1] '0.8.4'
> packageVersion("plyr")
[1] '1.7.1'
> packageVersion("lattice")
[1] '0.20.6'
> sessionInfo()
R version 2.15.0 (2012-03-30)
Platform: x86_64-pc-mingw32/x64 (64-bit)

locale:
[1] LC_COLLATE=C                          
[2] LC_CTYPE=English_United States.1252   
[3] LC_MONETARY=English_United States.1252
[4] LC_NUMERIC=C                          
[5] LC_TIME=English_United States.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods  
[7] base     
> 
> ylims <- c(0, 90) 
> 
> ###################################################
> ### code chunk: R3.1
> ###################################################
> data(armd.wide, armd0, package = "nlmeU")       # Data loaded
> library(lattice)
> armd0.subset <-                                 # Subset
+   subset(armd0, as.numeric(subject) %in% seq(1, 240, 10))
> xy1 <-                                          # Draft plot 
+   xyplot(visual ~ jitter(time) | treat.f, 
+          groups = subject, 
+          data = armd0.subset, 
+          type = "l", lty = 1)  
> update(xy1,                                     # Fig. 3.1
+        xlab = "Time (in weeks)",
+        ylab = "Visual acuity",
+        grid = "h")
> detach(package:lattice)
> 
> ###################################################
> ### code chunk: R3.2
> ###################################################
> table(armd.wide$miss.pat)

---- ---X --X- --XX -XX- -XXX X--- X-XX XXXX 
 188   24    4    8    1    6    2    1    6 
> with(armd.wide, table(miss.pat))
miss.pat
---- ---X --X- --XX -XX- -XXX X--- X-XX XXXX 
 188   24    4    8    1    6    2    1    6 
> xtabs(~miss.pat, armd.wide)
miss.pat
---- ---X --X- --XX -XX- -XXX X--- X-XX XXXX 
 188   24    4    8    1    6    2    1    6 
> 
> ###################################################
> ### code chunk: R3.3a
> ###################################################
> attach(armd0)
> flst <- list(time.f, treat.f)                    # "By" factors
> (tN <-                                           # Counts
+   tapply(visual, flst,
+          FUN = function(x) length(x[!is.na(x)])))
         Placebo Active
Baseline     119    121
4wks         117    114
12wks        117    110
24wks        112    102
52wks        105     90
> 
> ###################################################
> ### code chunk: R3.3b
> ###################################################
> tMn <- tapply(visual, flst, FUN = mean)          # Sample means
> tMd <- tapply(visual, flst, FUN = median)        # Sample medians
> colnames(res  <- cbind(tN, tMn, tMd))            # Column names
[1] "Placebo" "Active"  "Placebo" "Active"  "Placebo" "Active" 
> nms1 <- rep(c("P", "A"), 3)
> nms2 <- rep(c("n", "Mean", "Mdn"), rep(2, 3))
> colnames(res) <- paste(nms1, nms2, sep = ":")    # New column names
> res
         P:n A:n P:Mean A:Mean P:Mdn A:Mdn
Baseline 119 121 55.336 54.579  56.0  57.0
4wks     117 114 53.966 50.912  54.0  52.0
12wks    117 110 52.872 48.673  53.0  49.5
24wks    112 102 49.330 45.461  50.5  45.0
52wks    105  90 44.438 39.100  44.0  37.0
> detach(armd0)
> 
> ###################################################
> ### code chunk: R3.4 (Fig. 3.2, no horizontal grid lines)
> ###################################################
>  library(lattice)
>  bw1 <-                                            # Draft plot
+    bwplot(visual ~ time.f | treat.f, 
+           data = armd0)         
>  xlims <- c("Base", "4\nwks", "12\nwks", "24\nwks", "52\nwks")
>  update(bw1, xlim = xlims, pch = "|")              # Final plot
>  detach(package:lattice)
> 
> 
> ###################################################
> ### Fig. 3.2 with horizontal grid lines added
> ###################################################
> 
> library(lattice)
> myPanel <- function(x, y, subscripts, ...){
+   panel.grid(h = -1, v = 0)    
+   panel.bwplot(x, y, ...) 
+ }
> 
> bw1 <- bwplot(visual ~ time.f|treat.f,
+        data = armd0,
+        panel = myPanel, 
+        aspect = 1)
> xlims <- c("Base", "4\nwks", "12\nwks","24\nwks","52\nwks")
> bw1a <- update(bw1, xlim = xlims, ylim = ylims, 
+   ylab= "Visual acuity", pch = "|") 
> print(bw1a)
> detach(package:lattice)
> 
> ###################################################
> ### code for figure 3.3 not included
> ###################################################
> 
> ###################################################
> ### code chunk: R3.5a
> ###################################################
> mnt.pat<-                                   # Monotone patterns
+   c("----", "---X", "--XX", "-XXX", "XXXX") 
> armd.wide.mnt <-                            # Data subset
+   subset(armd.wide, miss.pat %in% mnt.pat)
> dim(armd.wide.mnt)                          # Number of rows and cols  
[1] 232  10
> levels(armd.wide.mnt$miss.pat)              # Some levels not needed
[1] "----" "---X" "--X-" "--XX" "-XX-" "-XXX" "X---" "X-XX"
[9] "XXXX"
> 
> 
> ###################################################
> ### code chunk: R3.5b
> ###################################################
> armd.wide.mnt1 <- 
+   within(armd.wide.mnt, 
+          {
+            miss.pat <- factor(miss.pat, levels = mnt.pat) 
+          })
> levels(armd.wide.mnt1$miss.pat)              
[1] "----" "---X" "--XX" "-XXX" "XXXX"
> 
> ###################################################
> ### code chunk: R3.5c
> ###################################################
> with(armd.wide.mnt1, 
+      {
+        fl  <- list(treat.f, miss.pat)       # List of "by" factors
+        tapply(subject, fl, FUN=function(x) length(x[!is.na(x)]))
+      })
        ---- ---X --XX -XXX XXXX
Placebo  102    9    3    1    1
Active    86   15    5    5    5
> 
> ###################################################
> ### code chunk: Fig. 3.4
> ###################################################
> library(lattice)
> 
> my.lowerPanel <-  ## pairwise.complete.obs 
+   function(x, y, subscripts, ...){
+   panel.grid(h = -1, v = -1) 
+   panel.xyplot(x, y, ...)
+ }
> 
> my.upperPanel <-  ## pairwise.complete.obs 
+   function(x, y, subscripts, ...){
+   panel.xyplot(x, y, type = "n", ...)
+   corx <- round(cor(x,y,use = "complete.obs"),2)
+   abs.corx <- abs(corx)
+   cex.value <- 3
+   ltext(50,50, corx, cex = abs.corx* cex.value)
+ }
> 
> mySuperPanel <- function(z, subscripts, panel.subscripts,...){
+   # z is data frame. Abbreviated variable names on the diagonal of the splom.
+   panel.pairs(z, subscripts = subscripts,
+               panel.subscripts = panel.subscripts,
+               as.matrix = TRUE, 
+               upper.panel = "my.upperPanel",
+               lower.panel = "my.lowerPanel",
+ prepanel.limits = function(z) return(c(1, 90))
+ )}
> 
> splom.form <- formula( ~cbind(vis0, vis4, vis12, vis24, vis52))
> armd.wide.tmp <- subset(armd.wide, miss.pat == "----",
+      select = c(visual0, visual4, visual12, visual24, visual52))
> names(armd.wide.tmp) <- c("vis0", "vis4","vis12","vis24","vis52") # Short names
> 
> splom.object <- splom(splom.form,
+   data = armd.wide.tmp,
+   par.settings = list(fontsize = list(points = 4), axis.text = list(cex = 0.9)),
+   as.matrix =TRUE,  
+   xlab = "",
+   superpanel = mySuperPanel
+ )
> print(splom.object)
> detach(package:lattice)
> 
> ###################################################
> ### code chunk: R3.6
> ###################################################
> visual.x <- subset(armd.wide, select = c(visual0:visual52))
> (varx <- var(visual.x, use = "complete.obs")) # Var-cov mtx
         visual0 visual4 visual12 visual24 visual52
visual0   220.31  206.71   196.24   193.31   152.71
visual4   206.71  246.22   224.79   221.27   179.23
visual12  196.24  224.79   286.21   257.77   222.68
visual24  193.31  221.27   257.77   334.45   285.23
visual52  152.71  179.23   222.68   285.23   347.43
> print(cor(visual.x, use = "complete.obs"),    # Corr mtx
+       digits = 2) 
         visual0 visual4 visual12 visual24 visual52
visual0     1.00    0.89     0.78     0.71     0.55
visual4     0.89    1.00     0.85     0.77     0.61
visual12    0.78    0.85     1.00     0.83     0.71
visual24    0.71    0.77     0.83     1.00     0.84
visual52    0.55    0.61     0.71     0.84     1.00
> diag(varx)                  # Var-cov diagonal elements
 visual0  visual4 visual12 visual24 visual52 
  220.31   246.22   286.21   334.45   347.43 
> cov2cor(varx)               # Corr mtx (alternative way) 
         visual0 visual4 visual12 visual24 visual52
visual0  1.00000 0.88754  0.78153  0.71216  0.55199
visual4  0.88754 1.00000  0.84680  0.77107  0.61279
visual12 0.78153 0.84680  1.00000  0.83317  0.70618
visual24 0.71216 0.77107  0.83317  1.00000  0.83676
visual52 0.55199 0.61279  0.70618  0.83676  1.00000
> 
> 
> ###################################################
> ### code chunk: Cleanup for ARMD study
> ###################################################
> rm(xlims,ylims) 
> rm(xy1, flst, tN, tMn, tMd, nms1, nms2, res)
> rm(bw1, bw1a)
> rm(mnt.pat, armd.wide.mnt, armd.wide.mnt1)
> rm(armd.wide, armd.wide.tmp, armd0, armd0.subset)
> rm(myPanel, my.lowerPanel, my.upperPanel,  mySuperPanel, splom.object, splom.form)
> rm(visual.x, varx)
> 
> ###################################################
> ### PRT Study: Muscle fiber specific-force (Section 3.3)
> ### code chunk: R3.7
> ###################################################
> data(prt.subjects, prt, package = "nlmeU") # Data loaded
> with(prt.subjects, tapply(bmi, prt.f, summary))
$High
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   18.4    22.9    24.8    25.1    28.2    31.0 

$Low
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   19.0    23.1    24.8    24.7    26.3    32.3 

> by(subset(prt.subjects, select = -id), prt.subjects$prt.f, summary)
prt.subjects$prt.f: High
  prt.f      age.f       sex.f         bmi      
 High:31   Young:15   Female:17   Min.   :18.4  
 Low : 0   Old  :16   Male  :14   1st Qu.:22.9  
                                  Median :24.8  
                                  Mean   :25.1  
                                  3rd Qu.:28.2  
                                  Max.   :31.0  
------------------------------------------------ 
prt.subjects$prt.f: Low
  prt.f      age.f       sex.f         bmi      
 High: 0   Young:15   Female:17   Min.   :19.0  
 Low :32   Old  :17   Male  :15   1st Qu.:23.1  
                                  Median :24.8  
                                  Mean   :24.7  
                                  3rd Qu.:26.3  
                                  Max.   :32.3  
> 
> 
> 
> ###################################################
> ### code chunk: R3.8a
> ###################################################
> fibL <- 
+    with(prt, 
+         tapply(spec.fo, 
+                list(id = id, fiberF = fiber.f, occF = occ.f), 
+                length))
> dimnms <- dimnames(fibL) 
> names(dimnms)         # Shortened names displayed
[1] "id"     "fiberF" "occF"  
> fibL["5", , ]         # Number of fiber measurements for subject 5
        occF
fiberF   Pre Pos
  Type 1  12  18
  Type 2   7   4
> fibL["335", , ]       # Number of fiber measurements for subject 335
        occF
fiberF   Pre Pos
  Type 1  NA   8
  Type 2  14  11
> 
> 
> ###################################################
> ### code chunk: R3.8b
> ###################################################
> fibM <-
+    with(prt, 
+         tapply(spec.fo, 
+                list(id = id, fiberF = fiber.f, occF = occ.f),
+                mean))
> fibM["5", , ]
        occF
fiberF      Pre    Pos
  Type 1 132.59 129.96
  Type 2 145.74 147.95
> 
>  
> ###################################################
> ### code chunk: R3.9a
> ###################################################
> 
> library(reshape)         
Loading required package: plyr

Attaching package: 'reshape'

The following object(s) are masked from 'package:plyr':

    rename, round_any

> idvar <- c("id", "prt.f", "fiber.f", "occ.f")
> meas.var <- c("spec.fo", "iso.fo")
> prtM <-                                        # Melting data
+   melt(prt, id.var = idvar, measure.var = meas.var) 
> dim(prtM)
[1] 4942    6
> head(prtM, n = 4)                              # First four rows
  id prt.f fiber.f occ.f variable value
1  5   Low  Type 1   Pre  spec.fo  83.5
2  5   Low  Type 1   Pre  spec.fo 132.8
3  5   Low  Type 2   Pre  spec.fo 161.1
4  5   Low  Type 1   Pre  spec.fo 158.8
> tail(prtM, n = 4)                              # Last four rows
      id prt.f fiber.f occ.f variable value
4939 520  High  Type 2   Pos   iso.fo 0.527
4940 520  High  Type 1   Pos   iso.fo 0.615
4941 520  High  Type 2   Pos   iso.fo 0.896
4942 520  High  Type 2   Pos   iso.fo 0.830
> 
> ###################################################
> ### code chunk: R3.9b
> ###################################################
> prtC <- cast(prtM, fun.aggregate = mean)       # Casting data
> names(prtC) 
[1] "id"      "prt.f"   "fiber.f" "occ.f"   "spec.fo" "iso.fo" 
> names(prtC)[5:6] <- c("spec.foMn", "iso.foMn") # Names modified
> head(prtC, n = 4)
  id prt.f fiber.f occ.f spec.foMn iso.foMn
1  5   Low  Type 1   Pre    132.59  0.51500
2  5   Low  Type 1   Pos    129.96  0.72289
3  5   Low  Type 2   Pre    145.74  0.47057
4  5   Low  Type 2   Pos    147.95  0.71175
> 
> ###################################################
> ### code chunk: Code for Figs: 3.5, 3.6, 3.7 not shown
> ###################################################
> 
> ###################################################
> ### code chunk: Cleanup for PRT study
> ###################################################
> rm(fibL, fibM, dimnms) 
> rm(idvar, meas.var, prtM, prtC)
> 
> ###################################################
> ### SII Project: Gain in the math achievement-score (Section 3.4)
> ### code chunk: R3.10
> ###################################################
> 
> data(SIIdata, package = "nlmeU")
> sapply(SIIdata, FUN = function(x) any(is.na(x)))
     sex minority mathkind mathgain      ses yearstea mathknow 
   FALSE    FALSE    FALSE    FALSE    FALSE    FALSE     TRUE 
housepov mathprep  classid schoolid  childid 
   FALSE    FALSE    FALSE    FALSE    FALSE 
> sum(as.numeric(is.na(SIIdata$mathknow)))
[1] 109
> range(SIIdata$mathknow, na.rm = TRUE)
[1] -2.50  2.61
> 
> ###################################################
> ### code chunk: R3.11
> ###################################################
> (schlN <- xtabs(~schoolid, SIIdata))  # Number of pupils per school
schoolid
  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16 
 11  10  14   6   6  12  14  16   6  18  31  27   9  15  13   6 
 17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32 
  9   4  11  12  17   4   5   8   7  15  21  10   8   3  22   9 
 33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48 
 22   7  11   8  11   9  12   7   9  18   4  17   5  13  10   6 
 49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 
  8  12   4   9   8  10  13  10   8   5   4  13  11  13   3  10 
 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80 
  9   8  12  16   5  19  27  11  10   3  15  27  24  15  12   7 
 81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96 
  9  19  12  14  20   7  10   6   4   3  16   9  21  15   5   8 
 97  98  99 100 101 102 103 104 105 106 107 
  6   2  19  13  16  11   8   6  10   2  10 
> range(schlN)
[1]  2 31
> xtabs(~schlN) # Distribution of the number of pupils over schools
schlN
 2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 
 2  4  6  5  8  5  9  9 10  7  7  6  3  5  4  2  2  3  1  2  2 
24 27 31 
 1  3  1 
> 
> ###################################################
> ### code chunk: R3.12
> ###################################################
> attach(SIIdata)
> ##  Long output omitted
> ##  (mthgM <- by(cbind(mathgain, mathkind), schoolid, colMeans))
> detach(SIIdata)
> 
> ###################################################
> ### code chunk: R3.13a
> ###################################################
> library(reshape)
> idvars <- c("schoolid") 
> mvars <- c("classid", "childid")
> dtm1 <- melt(SIIdata, id.vars = idvars, measure.vars = mvars)
> names(cst1  <- 
+   cast(dtm1, 
+        fun.aggregate = function(el) length(unique(el))))
[1] "schoolid" "classid"  "childid" 
> names(cst1) <- c("schoolid", "clssn", "schlN")
> 
> ###################################################
> ### code chunk: R3.13b
> ###################################################
> mvars <- c("mathgain", "mathkind", "housepov")
> dtm2 <- melt(SIIdata, id.vars = idvars, measure.vars = mvars)
> names(cst2 <- cast(dtm2, fun.aggregate = mean))
[1] "schoolid" "mathgain" "mathkind" "housepov"
> names(cst2) <- c("schoolid", "mthgMn", "mthkMn", "housepov")
> 
> 
> ###################################################
> ### code chunk: R3.13c
> ###################################################
> (schlDt  <- merge(cst1, cst2, sort = FALSE))
    schoolid clssn schlN mthgMn mthkMn housepov
1          1     2    11 59.636 458.36    0.082
2          2     3    10 65.000 487.90    0.082
3          3     4    14 88.857 469.14    0.086
4          4     2     6 35.167 462.67    0.365
5          5     1     6 60.167 445.33    0.511
6          6     3    12 78.667 457.08    0.044
7          7     4    14 57.357 442.07    0.148
8          8     3    16 47.250 498.69    0.085
9          9     3     6 34.833 475.33    0.537
10        10     4    18 74.944 441.33    0.346
11        11     9    31 50.452 499.81    0.101
12        12     5    27 52.407 462.52    0.106
13        13     2     9 47.667 479.44    0.055
14        14     3    15 44.333 468.93    0.157
15        15     5    13 75.000 445.92    0.121
16        16     2     6 91.833 429.17    0.113
17        17     5     9 75.444 417.67    0.261
18        18     1     4 89.750 389.50    0.272
19        19     3    11 55.545 446.27    0.058
20        20     3    12 61.750 453.50    0.532
21        21     3    17 56.706 450.12    0.187
22        22     1     4 39.500 447.75    0.438
23        23     3     5 70.000 469.20    0.282
24        24     4     8 37.625 476.00    0.263
25        25     2     7 28.286 449.43    0.309
26        26     3    15 57.933 459.87    0.564
27        27     4    21 58.667 496.95    0.050
28        28     4    10 46.500 454.30    0.214
29        29     2     8 44.625 498.12    0.102
30        30     1     3 27.667 442.33    0.085
31        31     4    22 50.636 444.23    0.012
32        32     3     9 52.667 499.22    0.261
33        33     5    22 62.591 450.45    0.047
34        34     2     7 50.714 444.43    0.303
35        35     2    11 30.182 481.09    0.130
36        36     2     8 72.000 468.25    0.088
37        37     4    11 51.000 435.09    0.249
38        38     2     9 47.778 454.56    0.170
39        39     4    12 27.250 503.58    0.123
40        40     2     7 33.286 485.14    0.279
41        41     3     9 68.778 471.00    0.036
42        42     4    18 59.056 468.17    0.157
43        43     2     4 55.500 470.00    0.179
44        44     4    17 69.000 465.35    0.347
45        45     1     5 66.600 474.80    0.164
46        46     5    13 54.000 457.23    0.238
47        47     3    10 73.800 436.50    0.257
48        48     1     6 49.000 430.33    0.159
49        49     2     8 81.500 457.50    0.142
50        50     3    12 43.917 497.25    0.044
51        51     1     4 56.500 460.25    0.096
52        52     2     9 42.000 478.44    0.138
53        53     2     8 72.250 473.50    0.101
54        54     2    10 36.200 497.80    0.137
55        55     3    13 53.538 472.92    0.065
56        56     2    10 52.100 497.10    0.040
57        57     5     8 70.500 450.25    0.289
58        58     1     5 50.000 484.00    0.101
59        59     2     4 45.000 509.25    0.362
60        60     2    13 73.846 461.38    0.243
61        61     4    11 43.364 458.73    0.335
62        62     2    13 54.000 521.54    0.170
63        63     1     3 55.000 493.33    0.072
64        64     2    10 67.400 450.70    0.180
65        65     3     9 56.333 481.22    0.050
66        66     3     8 59.875 478.00    0.509
67        67     3    12 80.083 443.25    0.339
68        68     5    16 78.000 462.69    0.209
69        69     2     5 64.600 424.00    0.523
70        70     5    19 80.684 450.42    0.430
71        71     5    27 52.481 503.74    0.085
72        72     3    11 50.727 508.55    0.249
73        73     2    10 51.300 451.10    0.117
74        74     2     3 58.333 446.67    0.202
75        75     4    15 76.067 470.20    0.367
76        76     5    27 44.000 454.67    0.161
77        77     4    24 55.458 482.38    0.041
78        78     3    15 35.400 461.93    0.407
79        79     3    12 63.667 457.67    0.351
80        80     2     7 74.571 457.43    0.190
81        81     2     9 65.667 454.11    0.210
82        82     4    19 56.632 450.79    0.103
83        83     2    12 56.083 476.58    0.141
84        84     3    14 81.571 430.36    0.255
85        85     5    20 52.800 504.80    0.107
86        86     3     7 34.429 461.29    0.537
87        87     4    10 45.800 492.00    0.306
88        88     2     6 38.667 437.00    0.546
89        89     1     4 49.750 488.75    0.092
90        90     2     3 50.333 461.00    0.259
91        91     4    16 48.438 461.94    0.047
92        92     3     9 64.111 469.56    0.114
93        93     4    21 41.857 500.24    0.068
94        94     4    15 82.533 446.80    0.127
95        95     2     5 67.400 468.00    0.067
96        96     3     8 46.125 462.75    0.107
97        97     1     6 65.833 470.83    0.075
98        98     1     2 49.000 429.50    0.085
99        99     5    19 51.947 452.42    0.095
100      100     4    13 61.692 476.69    0.071
101      101     4    16 64.062 456.62    0.064
102      102     2    11 53.455 453.09    0.126
103      103     3     8 99.875 427.25    0.076
104      104     2     6 87.667 444.33    0.054
105      105     2    10 61.400 460.00    0.099
106      106     1     2  9.500 526.50    0.266
107      107     2    10 48.200 464.20    0.177
> rm(cst1, cst2)
> 
> ###################################################
> ### code chunk: R3.14a
> ###################################################
> summary(schlDt$housepov)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0120  0.0855  0.1480  0.1940  0.2640  0.5640 
> 
> ###################################################
> ### code chunk: R3.14b
> ###################################################
> library(lattice)
> xyplot(mthgMn ~ housepov,                         # Fig. 3.8a
+        schlDt, type = c("p", "smooth"), grid = TRUE) 
> xyplot(mthgMn ~ mthkMn,                           # Fig. 3.8b
+        schlDt, type = c("p", "smooth"), grid = TRUE) 
> 
> ##################################################
> ## More detailed code for Figs. 3.8a and 3.8b
> ##################################################
> 
> #### Auxiliary step: Setting limits for y-axis
> range(SIIdata$mathgain)
[1] -110  253
> ylims <- c(-120, 260)
> 
> xyplot(mthgMn ~ housepov,                         # Fig. 3.8a
+        schlDt, type = c("p", "smooth"), 
+        ylim = ylims, grid = TRUE) 
> xyplot(mthgMn ~ mthkMn,                           # Fig. 3.8b
+        schlDt, type = c("p", "smooth"), 
+        ylim = ylims, grid = TRUE) 
> 
> ###################################################
> ### code chunk: R 3.15
> ###################################################
> (clssN <- xtabs(~ classid, SIIdata))
classid
  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16 
  5   3   3   6   1   5   1   4   3   2   4   5   9   4   1   6 
 17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32 
  3   1   2   3   4   8   1   1   4  10   6   5   3   4   4   4 
 33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48 
  4   1   4   1   1   7   2   3   5  10   3   6   5   5   1   4 
 49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 
  6   4   6   2   5   4   5   5   4   1   4   3   2   2   2   5 
 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80 
  1   6   2   4   3   1   2   3   3   1   6   4   1   8   5   6 
 81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96 
  8   5   7   1   7   5   1   2   3   2   4   1   1   6   2   8 
 97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 
  2   5   1   1   2   3   3   6   4   2   4   3   4   4   3   2 
113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 
  3   4   4   2   8   1   1   8   6   6   8   1   4   6   3   4 
129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 
  3   4   2   3   3   4   7   6   2   5   4   2   5   4   6   3 
145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 
  5   3   5   4   4   1   2   6   6   2   3   6   4   8   4   3 
161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 
  4   2   1   5   6   4   5   7   6   2   1   4   2   7   3   4 
177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 
  3   2   2   6   1   5   3   5   1   6   1   4   9   8   1   2 
193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 
  2   2   4   3   2   2   1   6   5   3   2   2   9   5   6   4 
209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 
  2   3   4   4   3   1   2   2   8   2   4   2   2   4   4   5 
225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 
  3   2   2   3   5   2   8   2   1   7   6   2   3   1   2   3 
241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 
  5   7   4   1   3   4   5   6   1   2   3   6   9   2   6   1 
257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 
  4   3   8   3   1   5   3   7   4   5   3   5   2   3   3   1 
273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 
  5   1   3   7   7   8   7   5   4   2   2   3   3   6   5   4 
289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 
  5   3   4   4   4   3   1   7   5   5   6   5   2   7   4   4 
305 306 307 308 309 310 311 312 
  4   4   4   3   3   3   2   4 
> sum(clssN)                           # Total number of pupils
[1] 1190
> range(clssN)
[1]  1 10
> (clssCnt <- xtabs(~clssN)) # Distribution of no. of pupils/classes
clssN
 1  2  3  4  5  6  7  8  9 10 
42 53 53 61 39 31 14 13  4  2 
> sum(clssCnt)                         # Total number of classes
[1] 312
> 
> 
> ###################################################
> ### Preparatory steps for R3.16.
> ### Steps similar to those shown in R13.3.
> ###################################################
> 
> ## See R2.13b how to obtain vector nms2 containing class-specific variables
> nms2 <- c("yearstea","mathknow", "mathprep", "classid") 
> library(reshape)
> (idvars <- c(nms2, "housepov"))
[1] "yearstea" "mathknow" "mathprep" "classid"  "housepov"
> mvars   <- c("childid")
> dtm1    <- melt(SIIdata, id.vars = idvars, measure.vars = mvars)
> cst1    <- cast(dtm1, 
+              classid + housepov + mathknow + mathprep ~ variable, 
+              function(el) length(unique(el)))
> names(cst1)[5] <- "clssN"
> 
> mvars   <- c("mathgain","mathkind")
> dtm2    <- melt(SIIdata, id.vars = "classid", measure.vars = mvars)
> cst2    <- cast(dtm2, classid ~ variable, mean)
> names(cst2) <- c("classid", "mthgMn", "mthkMn")
> clssDt  <- merge(cst1, cst2, sort = FALSE)
> 
> ###################################################
> ### code chunk: R 3.16
> ###################################################
> head(clssDt)                     # First few records only
  classid housepov mathknow mathprep clssN  mthgMn mthkMn
1       1    0.335    -0.72     2.50     5  47.800 459.00
2       2    0.303     0.58     3.00     3  65.667 454.00
3       3    0.040     0.85     2.75     3  15.667 492.67
4       4    0.339     1.08     5.33     6  91.500 437.00
5       5    0.121     0.15     1.33     1 182.000 342.00
6       6    0.187    -0.12     3.75     5  39.400 438.00
> 
> ###################################################
> ### code chunk for Figure 3.9
> ###################################################
> 
> library(lattice)
> 
> xyplot(mthgMn ~ housepov, data = clssDt,   # Fig. 3.9a
+        type = c("p", "smooth"),
+        ylim = ylims,
+        grid = TRUE)
> 
> xyplot(mthgMn ~ mthkMn, data = clssDt, 
+        type = c("p", "smooth"),
+        ylim = ylims,
+        grid = TRUE)
> 
> ###################################################
> ### code chunk: R 3.17a
> ###################################################
> auxDt <- merge(SIIdata, clssDt, sort = FALSE)
> 
> auxDt2  <- 
+   within(auxDt,
+          {
+           auxL  <- paste(classid, schoolid, sep = "\n:")
+           auxL1 <- paste(auxL, clssN, sep = "\n(")    
+           auxL2 <- paste(auxL1, ")", sep = "")       
+           clssF <-                                 # Factor clssF created
+             factor(schoolid:classid, labels = unique(auxL2))
+          })
> tmpDt <- subset(auxDt2, select = c(classid, schoolid, clssN, clssF))
> head(tmpDt, 4)                                    # First four records
  classid schoolid clssN        clssF
1     160        1     3 160\n:1\n(3)
2     160        1     3 160\n:1\n(3)
3     160        1     3 160\n:1\n(3)
4     217        1     8 217\n:1\n(8)
> tail(tmpDt, 4)                                    # Last four records
     classid schoolid clssN          clssF
1187      96      107     8  96\n:107\n(8)
1188      96      107     8  96\n:107\n(8)
1189     239      107     2 239\n:107\n(2)
1190     239      107     2 239\n:107\n(2)
> 
> 
> ###################################################
> ### code chunk: R 3.17b
> ###################################################
> library(lattice)
> dotplot(mathgain ~ clssF,                         # Fig. 3.10a
+         subset(auxDt2, schoolid %in% 1:4)) 
> 
> xyplot(mathgain ~ housepov, SIIdata,              # Fig. 3.10b
+        type = c("p", "smooth"))
> detach(package:lattice)
> 
> ##################################################
> ### SII Project: Cleanup
> ##################################################
> rm(schlN, mthgM)
Warning message:
In rm(schlN, mthgM) : object 'mthgM' not found
> rm(idvars, mvars, dtm1, cst1, dtm2, cst2, schlDt)
> rm(ylims, clssN, clssCnt, nms2, clssDt)
> rm(auxDt, auxDt2, tmpDt)
> 
> #################################################
> ### FCAT Study: Target score (Section 3.6)
> #################################################
> 
> 
> ###################################################
> ### code chunk: R 3.18a
> ###################################################
> data(fcat, package = "nlmeU")
> scM <- with(fcat, tapply(scorec, list(id, target), mean))
> scM[c(1, 2, 539), ]
    T1(4) T2(6) T3(8) T4(5) T5(9) T6(6) T7(8) T8(6) T9(5)
1       4     6     4     1     7     6     6     5     5
2       3     4     6     2     7     4     6     3     3
539     0     3     5     1     6     3     5     2     4
> 
> 
> ###################################################
> ### code chunk: R 3.18b
> ###################################################
> library(lattice)
> histogram(~scorec|target, 
+    data= fcat, breaks = NULL             # Fig. 3.11
+ )
> detach(package:lattice)
> 
> ##################################################
> ##### Cleanup and sessionInfo 
> ##################################################
> rm(scM)
> 
> sessionInfo()             # At the end of the session
R version 2.15.0 (2012-03-30)
Platform: x86_64-pc-mingw32/x64 (64-bit)

locale:
[1] LC_COLLATE=C                          
[2] LC_CTYPE=English_United States.1252   
[3] LC_MONETARY=English_United States.1252
[4] LC_NUMERIC=C                          
[5] LC_TIME=English_United States.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods  
[7] base     

other attached packages:
[1] reshape_0.8.4 plyr_1.7.1   

loaded via a namespace (and not attached):
[1] grid_2.15.0    lattice_0.20-6 tools_2.15.0  
> 
> proc.time()
   user  system elapsed 
   3.65    0.14    3.86 
